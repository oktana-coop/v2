name: Tag, Build and Release
on:
  pull_request:
    types:
      - closed
    branches:
      - main
  workflow_dispatch:
    inputs:
      release_type:
        description: 'Release type'
        required: false
        default: 'draft'
        type: choice
        options:
          - draft
          - production
      prerelease:
        description: 'Mark as pre-release'
        required: false
        default: false
        type: boolean
      default_version_bump:
        description: 'Default version bump'
        required: false
        default: 'patch'
        type: choice
        options:
          - patch
          - minor
          - major
concurrency:
  group: deploying-new-version
jobs:
  versioning:
    if: ${{ github.event_name == 'workflow_dispatch' || github.event.pull_request.merged == true }}
    runs-on: ubuntu-22.04
    permissions:
      contents: write
    outputs:
      new_tag: ${{ steps.tag.outputs.new_tag }}
    steps:
      - uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.merge_commit_sha || github.ref }}
          fetch-depth: '0'
      - name: Bump version and push tag
        id: tag
        uses: anothrNick/github-tag-action@1.73.0
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          TAG_PREFIX: v
          DEFAULT_BUMP: ${{ github.event.inputs.bump_type || 'patch' }}

  build:
    needs: versioning
    if: needs.versioning.outputs.new_tag
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [macos-latest, windows-latest, ubuntu-latest]

    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          lfs: true
          ref: ${{ needs.versioning.outputs.new_tag }}
      - name: Setup pnpm
        uses: pnpm/action-setup@v4
      - name: Setup Node.js
        uses: actions/setup-node@v5
        with:
          node-version: 23
          cache: 'pnpm'
      - name: Install dependencies
        run: pnpm install --shamefully-hoist
        env:
          OKTANA_NPM_TOKEN: ${{ secrets.OKTANA_NPM_TOKEN }}
      - name: Build Electron app
        run: pnpm run build
        env:
          OKTANA_NPM_TOKEN: ${{ secrets.OKTANA_NPM_TOKEN }}
      - name: Package Electron app
        run: pnpm run package
        env:
          OKTANA_NPM_TOKEN: ${{ secrets.OKTANA_NPM_TOKEN }}
          # Required to code-sign and notarize the macOS app
          CSC_LINK: ${{ secrets.CSC_LINK }}
          CSC_KEY_PASSWORD: ${{ secrets.CSC_KEY_PASSWORD }}
          APPLE_ID: ${{ secrets.APPLE_ID }}
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
          APPLE_APP_SPECIFIC_PASSWORD: ${{ secrets.APPLE_APP_SPECIFIC_PASSWORD }}

      # OS-specific uploads
      - name: Upload macOS artifacts
        if: matrix.os == 'macos-latest'
        uses: actions/upload-artifact@v4
        with:
          name: macos-build-${{ needs.versioning.outputs.new_tag }}
          path: |
            bin/*.dmg
            bin/*.zip

      - name: Upload Windows artifacts
        if: matrix.os == 'windows-latest'
        uses: actions/upload-artifact@v4
        with:
          name: windows-build-${{ needs.versioning.outputs.new_tag }}
          path: |
            bin/*.exe
            bin/*.zip

      - name: Upload Linux artifacts
        if: matrix.os == 'ubuntu-latest'
        uses: actions/upload-artifact@v4
        with:
          name: linux-build-${{ needs.versioning.outputs.new_tag }}
          path: |
            bin/*.AppImage
            bin/*.deb
            bin/*.tar.gz
      - name: Make AppImage executable
        if: matrix.os == 'ubuntu-latest'
        run: chmod +x ./bin/*.AppImage

  release:
    needs: [versioning, build]
    if: needs.versioning.outputs.new_tag
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - name: Check out Git repository
        uses: actions/checkout@v4
        with:
          ref: ${{ needs.versioning.outputs.new_tag }}
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
      - name: Organize artifacts by OS
        run: |
          mkdir -p ./release-assets/macos
          mkdir -p ./release-assets/windows
          mkdir -p ./release-assets/linux

          cp ./artifacts/macos-build-*/* ./release-assets/macos/ || true
          cp ./artifacts/windows-build-*/* ./release-assets/windows/ || true
          cp ./artifacts/linux-build-*/* ./release-assets/linux/ || true
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.versioning.outputs.new_tag }}
          name: Release ${{ needs.versioning.outputs.new_tag }}
          files: |
            ./release-assets/macos/*
            ./release-assets/windows/*
            ./release-assets/linux/*
          draft: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
